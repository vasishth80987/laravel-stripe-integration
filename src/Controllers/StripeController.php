<?php
/**
 * Created by PhpStorm.
 * User: vash
 * Date: 24/02/20
 * Time: 4:39 PM
 */

namespace Vsynch\StripeIntegration\Controllers;

use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Laravel\Cashier\Http\Controllers\WebhookController;
use Stripe\Event;

class StripeController extends WebhookController
{
    public function updateUserPaymentMethod(Request $request){
        try{

            $paymentMethod = $request->get('payment_method');

            //TODO -- add guard
            $user = Auth::user();

            $user->deletePaymentMethods();

            $update = $user->updateDefaultPaymentMethod($paymentMethod);

            $user->updateDefaultPaymentMethodFromStripe();

            return json_encode($update);

        }catch(\Exception $e){
            return json_encode($e->getMessage());
        }
    }

    public function editUserPaymentMethod(){
        try{

            //TODO -- add guard
            $user = Auth::user();

            if(!$user->hasPaymentMethod()) {
                return view('vendor.vsynch.stripe-integration.stripe.update_payment_method', [
                    'intent' => $user->createSetupIntent(),
                    'current_card_digits' => null
                ]);
            }
            else{
                $paymentMethod = $user->defaultPaymentMethod();

                return view('vendor.vsynch.stripe-integration.update_payment_method', [
                    'intent' => $user->createSetupIntent(),
                    'current_card_digits' => $paymentMethod->card->last4
                ]);
            }

        }catch(\Exception $e){
            return json_encode($e->getMessage());
        }
    }

    public function handleCustomerSubscriptionDeleted(array $payload)
    {
        return parent::handleCustomerSubscriptionDeleted($payload); // TODO: Change the autogenerated stub
    }

    public function handleCustomerSubscriptionCreated( $payload)
    {
        try {
            $event = Event::constructFrom(
                json_decode($payload, true)
            );
        } catch(\UnexpectedValueException $e) {
            // Invalid payload
            http_response_code(400);
            exit();
        }
        Log::info(json_encode($event));
        return $this->successMethod();
    }

    public function handleCustomerSubscriptionUpdated( $payload)
    {
        try {
            $event = Event::constructFrom(
                json_decode($payload, true)
            );
        } catch(\UnexpectedValueException $e) {
            // Invalid payload
            http_response_code(400);
            exit();
        }
        Log::info(json_encode($event));
        return $this->successMethod();
    }

    public function handleInvoicePaymentSucceeded( $payload)
    {
        try {
            $event = Event::constructFrom(
                json_decode($payload, true)
            );
        } catch(\UnexpectedValueException $e) {
            // Invalid payload
            http_response_code(400);
            exit();
        }
        Log::info(json_encode($event));
        return $this->successMethod();
    }
}